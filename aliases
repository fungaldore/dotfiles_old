# git
alias gd='LESS="-FIR" git diff'
alias gsh='LESS="-FIR" git show'
alias gpp='git pull --prune --no-tags'
alias glp='git pull --prune'
alias gls='git log --color --graph --pretty=format:"%Cred%h %Cgreen%ai %Cblue%an%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset" --abbrev-commit --date=relative'
alias glc='git log --color --graph --pretty=format:"%Cred%h%Creset %Cgreen%ai %Cblue%an -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset" --abbrev-commit --date=relative'  # end with commits (feature..master) to see what master has over feature
alias gcoc='git reset && gco . && git clean -fd'
alias gbb='git bisect bad'
alias gbg='git bisect good'
function gstaa {
  git stash apply stash@{$1}
}
function gstss {
  git stash show -P -u stash@{$1}
}
function gdu {
  (
    git ls-files --others --exclude-standard |
      while read -r i; do git diff --color -- /dev/null "$i"; done
  ) | less
}
function patch {
  gd $1 > /tmp/diff1 && vi /tmp/diff1
}

#alias lg1="log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all"
#alias lg2="log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all"
#alias lg=!"git lg1"

# script to merge current branch into branch lab-dev01.opstel.cloud
function mad {
  destination_branch=$1
  if [ -z "$destination_branch" ]; then
    destination_branch='lab-dev01.opstel.cloud'
  fi

  current_branch=`git branch --show-current`
  gco $destination_branch && gpp && git merge $current_branch && git tag -d $(git tag -l) && npm version prerelease && gp && gco $current_branch
}

#TODO make this function work with parameters
# # If the user has more than 100 repos you'll have to adjust the page number
# function git_clone_account {
#   curl -s 'https://api.github.com/users/USERNAME/repos?page=1&per_page=100' | grep \"clone_url\" | awk '{print $2}' | sed -e 's/\"//g' -e 's/,//g' | xargs -n1 git clone
# }

# docker
alias d='docker'
alias dc='docker-compose'
alias dps='docker ps -a --format="table {{.ID}}\t{{.Names}}\t{{.Status}}\t{{.Command}}\t{{.Ports}}"'
alias clean_docker_containers='docker ps -aq --no-trunc | xargs docker rm'
alias clean_docker_images='docker images -qf dangling=true | xargs docker rmi'
alias clean_docker_volumes='docker volume ls -qf dangling=true | xargs docker volume rm'
alias clean_docker="clean_docker_containers; clean_docker_images; clean_docker_images"
alias dclar="dc up nginx php-fpm workspace docker-in-docker mysql"
# sh into docker engine
# https://www.krenger.ch/blog/docker-desktop-for-mac-ssh-into-the-docker-vm/
alias docker_engine_socat="socat -d -d ~/Library/Containers/com.docker.docker/Data/debug-shell.sock pty,rawer"
alias docker_engine_screen="echo 'Example: screen /dev/ttys012'"

# node
alias nr='rm -rf node_modules'
alias ni='npm install'
alias ns='npm start'
alias nri='nr && ni'
alias nris='nri && ns'
alias nri-l='rm node_modules ; ni-l'

# inspiration https://stackoverflow.com/a/52029101
function cd {
  builtin cd "$@"
  if [[ -f .nvmrc ]]; then
    nvm use > /dev/null
  fi
}

#### EXPERIMENT
# Find the latest modified file in directory
#find . -type f -printf '%T@ %p\n' | sort -n | tail -1
# Exclude node_modules
#find . -type d -name node_modules -prune -o -type f -printf '%T@ %p\n' | sort -n | tail -1
# Make print human readable with %t
#find . -type d -name node_modules -prune -o -type f -printf '%T@ %t %p\n' | sort -n | tail -1
# Offset second column 50 chars (sort is wrong though)
#find . -type d -name node_modules -prune -o -type f -printf '%-50p %t\n' | sort -n | tail -1
# Exclude node_modules and .git
#find . -type d -name node_modules -prune -o -name .git -prune -o -type f -printf '%T@ %-50p %t\n' | sort -n | tail -4
#### END EXPERIMENT

alias find_latest="find . -type d -name node_modules -prune -o -name .git -prune -o -type f -printf '%-30T@ %-50p %t\n' | sort -n | tail -100"
alias fl='find_latest'

#
# Commands to convert all import statements in Speed to use @/ before the path when importing local files.
#find src -type f -exec perl -pi -e "s/ from '(?=$(join_by '|' $(ls -d src/*/ | perl -ne "s/src\/(.+)\//\1/g; print;")))/ from '@\//" {} \;
#another strategy for joining directory names                    ls -d src/*/ | sed 's/src\/\(.*\)\//\1/g' | tr '\n' '|'

# Find files not in, containing both terms
#find . -type f -not -path "./__tests__/*" -exec grep -inq 'event' {} \; -exec grep -in --color="always" 'style' {} \; -print

#find . -name node_modules -exec touch {}/.nosync \;  # adds .nosync file inside each directory called node_modules
#NOTE: Not using this because eslint doesn't like the symlinked node_modules
function ni-l {
  current_path=`pwd`
  project_name="$(basename "$current_path")"
  group_name="$(basename "$(dirname "$current_path")")"
  node_modules_path="$HOME/workspace/_node_modules_for_all/$group_name/$project_name"

  npm install

  [ -d $node_modules_path/node_modules ] && rm -rf $node_modules_path
  mkdir -p $node_modules_path
  mv node_modules $node_modules_path/
  ln -sF $node_modules_path/node_modules node_modules
}

#### EXPERIMENT
# To be used by the next function
function unpackproj {
  source ~/.zshrc
  cd ~/workspace/$1
  rm -rf $2
  tar xzf $2.tgz
  cd $2
  npm install
}

# NOTE: currently only works on projects 2 away from ~/workspace
# $0 is the command (projsync) $1 is first arg $2 is second arg
# SMARTEN get local workspace path to drop at
# SMARTEN find which was updated most recently, local or remote
function projsync {
  if [ -z "$1" ] ; then
    echo "Error: No arguments provided"
    echo "Usage: projsync project_directory"
  else
    parent=`basename $(pwd)`
    tar czf $1.tgz --exclude node_modules $1
    if [ -z "$2" ] ; then
      rsync -avzP $1.tgz tinytim:~/
    else
      rsync -avzP $1.tgz imac:~/workspace/$parent/
      # -t and -i might not be required
      ssh -t imac /opt/homebrew/bin/zsh -i -c "$(declare -f unpackproj); unpackproj $parent $1"
    fi
  fi
}
# will rsync combine my _testtube directories?

# From https://stackoverflow.com/a/16623897/4394359
# string='something'
# prefix='some'
# suffix='thing'
# foo=${string#"$prefix"}  # remove prefix from string
# bar=${string%"$suffix"}  # remove suffix from string
#TODO unfinished
function syncdiff {
  #gd > /tmp/diff

  # Get relative working direcotry (~/worspace/loope/loopewebapp)
  homedir=$(cd ~ && pwd)
  workdir=$(pwd)
  reldir=${workdir#"$homedir"}  # expect /workspace/loope/loopewebapp
  #reldir="~$reldir"
  echo $reldir  # Expect ~/workspace/loope/loopewebapp

  #
}
#### END EXPERIMENT


# MISC
alias cndd='conda deactivate'
alias cnda='conda activate'
alias j='fasd_cd -d'
alias nt='tmux new -s ${${PWD##*/}//./-}'
alias ta='tmux attach -t ${${PWD##*/}//./-}'
alias nvi='nvim'
alias nvimmg="nvim -c 'VcsJump merge'"
alias rsync='/usr/bin/rsync -avzpP'
alias cdicloud='cd ~/Library/Mobile\ Documents/com\~apple\~CloudDocs'
alias find='gfind'
# eza - replacement for ls (exa no longer maintaned https://stackoverflow.com/a/78737956)
# tabcomplete, git, icons https://github.com/eza-community/eza/issues/964#issuecomment-2143417856
alias l='eza -lahF --git --icons=always $@'
#alias l='eza -lahF --git $@'
alias li='ls -lahF'
# Try apple silicon location
[ -s "/opt/homebrew/bin/speedtest" ] && alias speedtest="/opt/homebrew/bin/speedtest --secure"
# Try intel location
[ -s "/usr/local/bin/speedtest" ] && alias speedtest="/usr/local/bin/speedtest --secure"
alias st='speedtest'
#alias restart_coreaudio1="sudo kill -9 $(ps ax | grep coreaudiod | grep -v 'grep' | cut -d' ' -f1)"
#alias restart_coreaudio2="sudo kill -9 $(ps ax | grep coreaudiod | grep -v 'grep' | cut -d' ' -f2)"
#alias restart_coreaudio3="sudo kill -9 $(ps ax | grep coreaudiod | grep -v 'grep' | cut -d' ' -f3)"
function restart_coreaudio {
  psax=$(ps ax | grep 'coreaudio' | grep -v 'grep')
  caid=${psax:0:5}
  sudo kill -9 $caid
}

function vf {
  nvim $(fasd -f $1)
}

# Join strings
function join_by {
  local d=${1-} f=${2-}
  if shift 2; then
    printf %s "$f" "${@/#/$d}"
  fi
}

# SSH into a thing and remove old record from known_hosts
function ssh!() {
  ssh-keygen -R $1
  ssh $1
}

# Prevent music from capturing play button. Source: https://apple.stackexchange.com/a/373557
#alias prevent_music_from_capturing_play_button="launchctl unload -w /System/Library/LaunchAgents/com.apple.rcd.plist"
# I reloaded this because my play/pause button wasn't working for other apps anymore.

# Adjust key repeat rate: https://apple.stackexchange.com/a/83923
function setKeyRepeatShort {
  defaults write -g InitialKeyRepeat -int 10 # normal minimum is 15 (225 ms)
  defaults write -g KeyRepeat -int 1 # normal minimum is 2 (30 ms)
}

# for Catalina - use macvim instead of default vim
#alias vim='/usr/local/Cellar/macvim/8.1-151/MacVim.app/Contents/bin/vim'
#alias vim='/usr/local/Cellar/macvim/8.2-171_1/MacVim.app/Contents/bin/vim'
#No longer needed.  This must have been a workaround from the first days of Catalina.

# loope
alias curl_loope_function='curl https://us-central1-loop-60b76.cloudfunctions.net/sendTimelineEventNotification'
alias deploy_loope_function='firebase deploy --only functions:sendTimelineEventNotification'
alias deployloope='date ; deploy_loope_function ; date ; sleep 30 ; echo "curling" ; curl_loope_function ; date'


# mac system

# Hide and show the desktop in Catalina
alias hide_desktop='defaults write com.apple.finder CreateDesktop -bool false; killall Finder'
alias show_desktop='defaults write com.apple.finder CreateDesktop -bool true ; killall Finder'

# Increase the max filesize of quicklookstephen to ~10MB
# https://github.com/whomwah/qlstephen
# defaults write com.whomwah.quicklookstephen maxFileSize 10000000

#### EXPERIMENT
function open_dev_workspace {
  open -g -a /Applications/Docker.app
  sleep 1
  open -g -a /Applications/iTerm.app
  sleep 1
  open -g -a /Applications/Visual\ Studio\ Code.app
  sleep 1
  open -g -a /Applications/Firefox\ Nightly.app
  sleep 1
  open -g -a /Applications/Telegram.app
  sleep 1
  open -g -a /Applications/Slack.app
  sleep 1
  open -g -a /Applications/Upwork.app
}

# # manjaro system
# if [ "$(uname)" == "Linux" ]; then
#   alias b_2='xrandr --output DP-2 --brightness 0.2'
#   alias b_5='xrandr --output DP-2 --brightness 0.5'
#   alias b_7='xrandr --output DP-2 --brightness 0.7'
#   alias b_8='xrandr --output DP-2 --brightness 0.8'
#   alias b_10='xrandr --output DP-2 --brightness 1.0'
# fi

# == Material colors ==
# source: https://github.com/material-theme/vsc-material-theme/blob/master/material-theme.config.json
# "accents": {
#   "Acid Lime": "#C6FF00",
#   "Blue": "#2979FF",
#   "Breaking Bad": "#388E3C",
#   "Bright Teal": "#64FFDA",
#   "Cyan": "#00BCD4",
#   "Graphite": "#616161",
#   "Indigo": "#5C6BC0",
#   "Lime": "#7CB342",
#   "Orange": "#FF7042",
#   "Pink": "#FF4081",
#   "Purple": "#AB47BC",
#   "Red": "#E57373",
#   "Sky": "#84FFFF",
#   "Tomato": "#F44336",
#   "Teal": "#80CBC4",
#   "Yellow": "#FFA000"
# },


# == Palenight colors ==
# source https://github.com/material-theme/vsc-material-theme/blob/master/scripts/generator/settings/specific/palenight.ts
#
# export default {
#   id: 'material.theme.palenight',
#   name: 'Material-Theme-Palenight',
#   type: 'dark',
#   scheme: {
#     defaultAccent: '#80CBC4',
#     background: '#292D3E',
#     backgroundAlt: '#292D3E',
#     contrastBorder: '#292D3E',
#     comments: '#676E95',
#     caret: '#FFCC00',
#     findHighlight: '#FFCC00',
#     foreground: '#A6ACCD',
#     focusBorder: '#FFFFFF',
#     guides: '#4E5579',
#     lineNumbers: '#3A3F58',
#     invisibles: '#4E5579',
#     lineHighlight: '#000000',
#     selection: '#717CB450',
#     shadow: '#00000030',
#     inputBackground: '#333747',
#     inputForeground: '#EEFFFF',
#     inputBorder: '#FFFFFF10',
#     scrollbars: '#A6ACCD20',
#     scrollbarsHover: '#A6ACCD10',
#     statusbarForeground: '#676E95',
#     sidebarBackground: '#292D3E',
#     sidebarForeground: '#676E95',
#     listHoverForeground: '#FFFFFF',
#     listHoverBackground: '#292D3E',
#     tabActiveForeground: '#FFFFFF',
#     inactiveSelectionBackground: '#00000030',
#     findMatchBackground: '#000000',
#     findMatchHighlightBackground: '#00000050',
#     findMatchHighlightBorder: '#ffffff30',
#     base: {
#       white: '#ffffff',
#       black: '#000000',
#       red: '#f07178',
#       orange: '#F78C6C',
#       yellow: '#FFCB6B',
#       green: '#C3E88D',
#       cyan: '#89DDFF',
#       blue: '#82AAFF',
#       paleblue: '#B2CCD6',
#       purple: '#C792EA',
#       brown: '#916b53',
#       pink: '#ff9cac',
#       violet: '#bb80b3'
#     }
#   }
# };
#### END EXPERIMENT

# VPN tunnel via ssh
# https://www.howtogeek.com/168145/how-to-use-ssh-tunneling/
# ssh -L 4040:localhost:4040 tinytim
# then navigate to localhost:4040 locally to see the page from tinytim
# END
#
# Another ssh trick (forwarding ports?)
# ssh -d 8080 -C -N peaky
#
# Allow reverse ssh
# ssh -R 43022:localhost:22 peaky
# then ssh localhost:43022 from destination to get back in

# Compress and encrypt file
# tar czvpf - jake | openssl enc -aes-256-cbc -salt -out jake.tgz.enc -pass file:~/Downloads/enc.key.txt
# Decrypt and decompress file
# openssl enc -d -aes-256-cbc -in jake.tgz.enc -out - -pass file:~/Downloads/enc.key.txt | tar xzvf -

# Process all pcap files
# for i in *.pcap; do                                                                                                                     ──(Sun,Apr07)─┘
#     echo "Processing $i"
#     aircrack-ng -a2 -w ../pwnagotchi/allwords.txt "$i" > "output_$i" 2>/dev/null
#done
